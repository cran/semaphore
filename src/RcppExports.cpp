// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_create_semaphore
void rcpp_create_semaphore(const char* id, unsigned int value);
RcppExport SEXP _semaphore_rcpp_create_semaphore(SEXP idSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type id(idSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type value(valueSEXP);
    rcpp_create_semaphore(id, value);
    return R_NilValue;
END_RCPP
}
// rcpp_sem_post
void rcpp_sem_post(const char* id);
RcppExport SEXP _semaphore_rcpp_sem_post(SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type id(idSEXP);
    rcpp_sem_post(id);
    return R_NilValue;
END_RCPP
}
// rcpp_wait
bool rcpp_wait(const char* id);
RcppExport SEXP _semaphore_rcpp_wait(SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_wait(id));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_try_wait
bool rcpp_try_wait(const char* id);
RcppExport SEXP _semaphore_rcpp_try_wait(SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_try_wait(id));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_wait_seconds
bool rcpp_wait_seconds(const char* id, long seconds);
RcppExport SEXP _semaphore_rcpp_wait_seconds(SEXP idSEXP, SEXP secondsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type id(idSEXP);
    Rcpp::traits::input_parameter< long >::type seconds(secondsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_wait_seconds(id, seconds));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_wait_microseconds
bool rcpp_wait_microseconds(const char* id, long microseconds);
RcppExport SEXP _semaphore_rcpp_wait_microseconds(SEXP idSEXP, SEXP microsecondsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type id(idSEXP);
    Rcpp::traits::input_parameter< long >::type microseconds(microsecondsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_wait_microseconds(id, microseconds));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_remove_semaphore
bool rcpp_remove_semaphore(const char* id);
RcppExport SEXP _semaphore_rcpp_remove_semaphore(SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_remove_semaphore(id));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_semaphore_rcpp_create_semaphore", (DL_FUNC) &_semaphore_rcpp_create_semaphore, 2},
    {"_semaphore_rcpp_sem_post", (DL_FUNC) &_semaphore_rcpp_sem_post, 1},
    {"_semaphore_rcpp_wait", (DL_FUNC) &_semaphore_rcpp_wait, 1},
    {"_semaphore_rcpp_try_wait", (DL_FUNC) &_semaphore_rcpp_try_wait, 1},
    {"_semaphore_rcpp_wait_seconds", (DL_FUNC) &_semaphore_rcpp_wait_seconds, 2},
    {"_semaphore_rcpp_wait_microseconds", (DL_FUNC) &_semaphore_rcpp_wait_microseconds, 2},
    {"_semaphore_rcpp_remove_semaphore", (DL_FUNC) &_semaphore_rcpp_remove_semaphore, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_semaphore(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
